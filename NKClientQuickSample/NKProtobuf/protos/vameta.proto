syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package VAMetaService;
/*
    va metadata streaming service
*/
service VAMetaService {
    rpc GetVAMetaStream (google.protobuf.Empty) returns (stream FrameMetaData); 
}

/*
    detected meta in frame
*/
message FrameMetaData {
    string channel_id = 1;                   // 채널 ID
    google.protobuf.Timestamp timestamp = 2; // 발생 시간
    repeated EventInfo event_list = 3;       // 이벤트 검출 리스트
    repeated Segmetation object_list = 4;    // 객체 검출 
}
/* 
1. image capture 순간은 언제가 좋을지..
2. 현재 roi 위치를 알려주는게 좋을지.. 고객이 TraceResult에서 최신 결과를 취할지..
3. 얼굴 검출 결과는 단순히 검출 결과는 OBJECT TYPE으로 얼굴 남/녀 확인 및 크로핑 이미지
   --> 크로핑 받은 이미지를 따로 매칭을 호출하는 방식으로 하는게 좋지 않을까..
*/
message EventInfo {
    int32 id = 1;                          // 객체 ID
    State state = 2;                       // 객체 상태
    Segmetation segmentation = 3;          // 검출 정보
    repeated TraceResult alram_trace = 4;  // ROI 내역
    string base64_jpg_image = 5;           // 검출 객체 이미지 (jpeg image --> base64 encoding)
}
/*
    프레임 내 검출 결과 정보
*/
message Segmetation {
    ObjectType label = 1;         // 객체 종류 (enum ObjectType 참고)
    BoundingBox box = 2;          // 객체 검출 박스 좌표
    double confidence = 3;        // 검출 정확도 (0 ~1)
}
/*
    관심 영역 발생 내역
*/
message TraceResult {
    RoiResult alram_roi = 1;
    LinkResult alram_link = 2;
    string alram_timestamp = 3;
}
/*
    관심 영역 정보
*/
message RoiResult {
    string roi_id = 1;
    string roi_name = 2;
    LineResult alram_line = 3;
}
/*
    관심 영역 라인 정보 (IN, OUT)
*/
message LineResult {
    int32 line_id = 1;
    string line_name = 2;
}
/*
    영역 연계 정보
*/
message LinkResult {
    string link_id = 1;
    string link_name = 2;
}
/*
    검출 객체 정보
    좌표 기준 : 영상 비율 기준 정규화 (0 ~ 1)
*/
message BoundingBox {
    double x = 1;      //객체 박스 x좌표
    double y = 2;      //객체 박스 y좌표
    double width = 3;  //객체 박스 너비
    double height = 4; //객체 박스 높이
}
/*
    객체 종류
*/
enum ObjectType
{
    PERSON = 0;                   // 사람
    BIKE = 1;                     // 자전거
    CAR = 2;                      // 승용차
    MOTORCYCLE = 3;               // 오토바이
    BUS = 4;                      // 버스
    TRUCK = 5;                    // 트럭
    EXCAVATOR = 6;                // 굴착기
    TANKTRUCK = 7;                // 탱크트럭
    FORKLIFT = 8;                 // 지게차
    LEMICON = 9;                  // 레미콘
    CULTIVATOR = 10;              // 경운기
    TRACTOR = 11;                 // 트랙터
    FLAME = 12;                   // 불꽃
    SMOKE = 13;                   // 연기
    FACE_MAN = 14;                // 얼굴_남자
    FACE_WOMAN = 15;              // 얼굴_여자
}
/*
    이벤트 발생 상태값
*/
enum State
{
    START = 0;      //시작
    CONTINUE = 1;   //진행
    END = 2;        //종료
}